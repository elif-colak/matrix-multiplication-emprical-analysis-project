# -*- coding: utf-8 -*-
"""matrix_multiplication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17QAFpBUh_UQ6SZOLEjbCx9UFaekR5xaP
"""

import numpy as np
import time


# Create the matrix
def create_matrix(n1, n2):
  return np.random.randint(low=0, high=10, size=(n1, n2))

size = 32

print("Size: ", size, " x ", size)

# Brute Force
def brute_multiply(A, B):

    C = np.random.randint(0,1,size=(len(A),len(A)))

    for i in range(len(A)):

        for j in range(len(B)):

            for k in range(len(C)):

                C[i][j] += A[i][k]*B[k][j]

    return C

#-----------------------------------------------------------

# Matrix generation with different sizes

arr1 = create_matrix(size, size)
#print(arr1)

arr2 = create_matrix(size, size)
#print(arr2)

#brute force calculation
start1 = time.time()

result_brute = brute_multiply(arr1, arr2)

end1 = time.time()

time_brute = end1 - start1

print("Time Brute Force: ", time_brute)

#print(result_brute)

#------------------------------------------------------------

# Naive Divide and Conquer

#Function to add two matrices
def add_matrix(matrix_A, matrix_B, matrix_C, split_index):
    for i in range(split_index):
        for j in range(split_index):
            matrix_C[i][j] = matrix_A[i][j] + matrix_B[i][j]


#Function to multiply two matrices
def naivedc_matrix(matrix_A, matrix_B):
    col_1 = len(matrix_A[0])
    row_1 = len(matrix_A)
    col_2 = len(matrix_B[0])
    row_2 = len(matrix_B)

    if (col_1 != row_2):
        print("\nError: The number of columns in Matrix A  must be equal to the number of rows in Matrix B\n")
        return 0

    result_matrix_row = [0] * col_2
    result_matrix = [[0 for x in range(col_2)] for y in range(row_1)]

    if (col_1 == 1):
        result_matrix[0][0] = matrix_A[0][0] * matrix_B[0][0]

    else:
        split_index = col_1 // 2

        row_vector = [0] * split_index
        result_matrix_00 = [[0 for x in range(split_index)] for y in range(split_index)]
        result_matrix_01 = [[0 for x in range(split_index)] for y in range(split_index)]
        result_matrix_10 = [[0 for x in range(split_index)] for y in range(split_index)]
        result_matrix_11 = [[0 for x in range(split_index)] for y in range(split_index)]
        a00 = [[0 for x in range(split_index)] for y in range(split_index)]
        a01 = [[0 for x in range(split_index)] for y in range(split_index)]
        a10 = [[0 for x in range(split_index)] for y in range(split_index)]
        a11 = [[0 for x in range(split_index)] for y in range(split_index)]
        b00 = [[0 for x in range(split_index)] for y in range(split_index)]
        b01 = [[0 for x in range(split_index)] for y in range(split_index)]
        b10 = [[0 for x in range(split_index)] for y in range(split_index)]
        b11 = [[0 for x in range(split_index)] for y in range(split_index)]

        for i in range(split_index):
            for j in range(split_index):
                a00[i][j] = matrix_A[i][j]
                a01[i][j] = matrix_A[i][j + split_index]
                a10[i][j] = matrix_A[split_index + i][j]
                a11[i][j] = matrix_A[i + split_index][j + split_index]
                b00[i][j] = matrix_B[i][j]
                b01[i][j] = matrix_B[i][j + split_index]
                b10[i][j] = matrix_B[split_index + i][j]
                b11[i][j] = matrix_B[i + split_index][j + split_index]

        add_matrix(naivedc_matrix(a00, b00),naivedc_matrix(a01, b10),result_matrix_00, split_index)
        add_matrix(naivedc_matrix(a00, b01),naivedc_matrix(a01, b11),result_matrix_01, split_index)
        add_matrix(naivedc_matrix(a10, b00),naivedc_matrix(a11, b10),result_matrix_10, split_index)
        add_matrix(naivedc_matrix(a10, b01),naivedc_matrix(a11, b11),result_matrix_11, split_index)

        for i in range(split_index):
            for j in range(split_index):
                result_matrix[i][j] = result_matrix_00[i][j]
                result_matrix[i][j + split_index] = result_matrix_01[i][j]
                result_matrix[split_index + i][j] = result_matrix_10[i][j]
                result_matrix[i + split_index][j + split_index] = result_matrix_11[i][j]

    return result_matrix

# Matrix generation with different sizes

print("--------------------------------------------------")

#naive dc calculation
start2 = time.time()

result_naivedc = naivedc_matrix(arr1, arr2)

end2 = time.time()

time_naivedc = end2 - start2

print("Time NaiveDC: ", time_naivedc)

#print(result_naivedc)

#------------------------------------------------------------

# Strassen's

def split(matrix):

    row, col = matrix.shape
    row2, col2 = row//2, col//2
    return matrix[:row2, :col2], matrix[:row2, col2:], matrix[row2:, :col2], matrix[row2:, col2:]

def strassen(x, y):
    if len(x) == 1:
        return x * y

    a, b, c, d = split(x)
    e, f, g, h = split(y)

    p1 = strassen(a, f - h)
    p2 = strassen(a + b, h)
    p3 = strassen(c + d, e)
    p4 = strassen(d, g - e)
    p5 = strassen(a + d, e + h)
    p6 = strassen(b - d, g + h)
    p7 = strassen(a - c, e + f)

    c11 = p5 + p4 - p2 + p6
    c12 = p1 + p2
    c21 = p3 + p4
    c22 = p1 + p5 - p3 - p7

    c = np.vstack((np.hstack((c11, c12)), np.hstack((c21, c22))))

    return c

print("--------------------------------------------------")

#strassen calculation
start3 = time.time()

result_strassen = strassen(arr1, arr2)

end3 = time.time()

time_strassen = end3 - start3

print("Time Strassen: ", time_strassen)

#print(result_strassen)